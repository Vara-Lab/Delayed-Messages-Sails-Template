// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct AppFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> AppFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::AppFactory for AppFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::New>::new(self.remoting.clone(), ())
    }
    fn new_with_data(
        &self,
        vft_contract_id: Option<ActorId>,
        min_tokens_to_add: u128,
        tokens_per_vara: u128,
    ) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::NewWithData>::new(
            self.remoting.clone(),
            (vft_contract_id, min_tokens_to_add, tokens_per_vara),
        )
    }
}
pub mod app_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
        pub struct NewWithData(());
        impl NewWithData {
            #[allow(dead_code)]
            pub fn encode_call(
                vft_contract_id: Option<ActorId>,
                min_tokens_to_add: u128,
                tokens_per_vara: u128,
            ) -> Vec<u8> {
                <NewWithData as ActionIo>::encode_call(&(
                    vft_contract_id,
                    min_tokens_to_add,
                    tokens_per_vara,
                ))
            }
        }
        impl ActionIo for NewWithData {
            const ROUTE: &'static [u8] = &[44, 78, 101, 119, 87, 105, 116, 104, 68, 97, 116, 97];
            type Params = (Option<ActorId>, u128, u128);
            type Reply = ();
        }
    }
}
pub struct ContractGasReservation<R> {
    remoting: R,
}
impl<R> ContractGasReservation<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::ContractGasReservation for ContractGasReservation<R> {
    type Args = R::Args;
    fn reserve_gas(
        &mut self,
        amount: u64,
        duration_in_blocks: u32,
    ) -> impl Call<Output = GasReservationEvents, Args = R::Args> {
        RemotingAction::<_, contract_gas_reservation::io::ReserveGas>::new(
            self.remoting.clone(),
            (amount, duration_in_blocks),
        )
    }
    fn unreserve_gas(
        &mut self,
        reservation_id: u64,
    ) -> impl Call<Output = GasReservationEvents, Args = R::Args> {
        RemotingAction::<_, contract_gas_reservation::io::UnreserveGas>::new(
            self.remoting.clone(),
            reservation_id,
        )
    }
    fn update_reservations_id_if_expired(
        &mut self,
    ) -> impl Call<Output = GasReservationEvents, Args = R::Args> {
        RemotingAction::<_, contract_gas_reservation::io::UpdateReservationsIdIfExpired>::new(
            self.remoting.clone(),
            (),
        )
    }
    fn expired_reservations_id(&self) -> impl Query<Output = GasReservationEvents, Args = R::Args> {
        RemotingAction::<_, contract_gas_reservation::io::ExpiredReservationsId>::new(
            self.remoting.clone(),
            (),
        )
    }
    fn reservations_id(&self) -> impl Query<Output = GasReservationEvents, Args = R::Args> {
        RemotingAction::<_, contract_gas_reservation::io::ReservationsId>::new(
            self.remoting.clone(),
            (),
        )
    }
}
pub mod contract_gas_reservation {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct ReserveGas(());
        impl ReserveGas {
            #[allow(dead_code)]
            pub fn encode_call(amount: u64, duration_in_blocks: u32) -> Vec<u8> {
                <ReserveGas as ActionIo>::encode_call(&(amount, duration_in_blocks))
            }
        }
        impl ActionIo for ReserveGas {
            const ROUTE: &'static [u8] = &[
                88, 67, 111, 110, 116, 114, 97, 99, 116, 71, 97, 115, 82, 101, 115, 101, 114, 118,
                97, 116, 105, 111, 110, 40, 82, 101, 115, 101, 114, 118, 101, 71, 97, 115,
            ];
            type Params = (u64, u32);
            type Reply = super::GasReservationEvents;
        }
        pub struct UnreserveGas(());
        impl UnreserveGas {
            #[allow(dead_code)]
            pub fn encode_call(reservation_id: u64) -> Vec<u8> {
                <UnreserveGas as ActionIo>::encode_call(&reservation_id)
            }
        }
        impl ActionIo for UnreserveGas {
            const ROUTE: &'static [u8] = &[
                88, 67, 111, 110, 116, 114, 97, 99, 116, 71, 97, 115, 82, 101, 115, 101, 114, 118,
                97, 116, 105, 111, 110, 48, 85, 110, 114, 101, 115, 101, 114, 118, 101, 71, 97,
                115,
            ];
            type Params = u64;
            type Reply = super::GasReservationEvents;
        }
        pub struct UpdateReservationsIdIfExpired(());
        impl UpdateReservationsIdIfExpired {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <UpdateReservationsIdIfExpired as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for UpdateReservationsIdIfExpired {
            const ROUTE: &'static [u8] = &[
                88, 67, 111, 110, 116, 114, 97, 99, 116, 71, 97, 115, 82, 101, 115, 101, 114, 118,
                97, 116, 105, 111, 110, 116, 85, 112, 100, 97, 116, 101, 82, 101, 115, 101, 114,
                118, 97, 116, 105, 111, 110, 115, 73, 100, 73, 102, 69, 120, 112, 105, 114, 101,
                100,
            ];
            type Params = ();
            type Reply = super::GasReservationEvents;
        }
        pub struct ExpiredReservationsId(());
        impl ExpiredReservationsId {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <ExpiredReservationsId as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for ExpiredReservationsId {
            const ROUTE: &'static [u8] = &[
                88, 67, 111, 110, 116, 114, 97, 99, 116, 71, 97, 115, 82, 101, 115, 101, 114, 118,
                97, 116, 105, 111, 110, 84, 69, 120, 112, 105, 114, 101, 100, 82, 101, 115, 101,
                114, 118, 97, 116, 105, 111, 110, 115, 73, 100,
            ];
            type Params = ();
            type Reply = super::GasReservationEvents;
        }
        pub struct ReservationsId(());
        impl ReservationsId {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <ReservationsId as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for ReservationsId {
            const ROUTE: &'static [u8] = &[
                88, 67, 111, 110, 116, 114, 97, 99, 116, 71, 97, 115, 82, 101, 115, 101, 114, 118,
                97, 116, 105, 111, 110, 56, 82, 101, 115, 101, 114, 118, 97, 116, 105, 111, 110,
                115, 73, 100,
            ];
            type Params = ();
            type Reply = super::GasReservationEvents;
        }
    }
}
pub struct MiniDeXs<R> {
    remoting: R,
}
impl<R> MiniDeXs<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::MiniDeXs for MiniDeXs<R> {
    type Args = R::Args;
    fn add_tokens_to_contract(
        &mut self,
        tokens_to_add: u128,
    ) -> impl Call<Output = MiniDexsEvents, Args = R::Args> {
        RemotingAction::<_, mini_de_xs::io::AddTokensToContract>::new(
            self.remoting.clone(),
            tokens_to_add,
        )
    }
    fn set_min_tokens_to_add(
        &mut self,
        min_tokens_to_add: u128,
    ) -> impl Call<Output = MiniDexsEvents, Args = R::Args> {
        RemotingAction::<_, mini_de_xs::io::SetMinTokensToAdd>::new(
            self.remoting.clone(),
            min_tokens_to_add,
        )
    }
    fn set_tokens_per_vara(
        &mut self,
        tokens_per_vara: u128,
    ) -> impl Call<Output = MiniDexsEvents, Args = R::Args> {
        RemotingAction::<_, mini_de_xs::io::SetTokensPerVara>::new(
            self.remoting.clone(),
            tokens_per_vara,
        )
    }
    fn set_vft_contract_id(
        &mut self,
        vft_contract_id: ActorId,
    ) -> impl Call<Output = MiniDexsEvents, Args = R::Args> {
        RemotingAction::<_, mini_de_xs::io::SetVftContractId>::new(
            self.remoting.clone(),
            vft_contract_id,
        )
    }
    fn swap_tokens_by_num_of_varas(
        &mut self,
    ) -> impl Call<Output = MiniDexsEvents, Args = R::Args> {
        RemotingAction::<_, mini_de_xs::io::SwapTokensByNumOfVaras>::new(self.remoting.clone(), ())
    }
    fn swap_tokens_to_varas(
        &mut self,
        amount_of_tokens: u128,
    ) -> impl Call<Output = MiniDexsEvents, Args = R::Args> {
        RemotingAction::<_, mini_de_xs::io::SwapTokensToVaras>::new(
            self.remoting.clone(),
            amount_of_tokens,
        )
    }
    fn test_block_height(&mut self) -> impl Call<Output = u32, Args = R::Args> {
        RemotingAction::<_, mini_de_xs::io::TestBlockHeight>::new(self.remoting.clone(), ())
    }
    fn test_block_time(&mut self) -> impl Call<Output = u64, Args = R::Args> {
        RemotingAction::<_, mini_de_xs::io::TestBlockTime>::new(self.remoting.clone(), ())
    }
    fn contract_total_varas_stored(
        &self,
    ) -> impl Query<Output = MiniDexsQueryEvents, Args = R::Args> {
        RemotingAction::<_, mini_de_xs::io::ContractTotalVarasStored>::new(
            self.remoting.clone(),
            (),
        )
    }
    fn test_block_height_1(&self) -> impl Query<Output = u32, Args = R::Args> {
        RemotingAction::<_, mini_de_xs::io::TestBlockHeight1>::new(self.remoting.clone(), ())
    }
    fn test_block_time_1(&self) -> impl Query<Output = u64, Args = R::Args> {
        RemotingAction::<_, mini_de_xs::io::TestBlockTime1>::new(self.remoting.clone(), ())
    }
    fn tokens_to_swap_one_vara(&self) -> impl Query<Output = MiniDexsQueryEvents, Args = R::Args> {
        RemotingAction::<_, mini_de_xs::io::TokensToSwapOneVara>::new(self.remoting.clone(), ())
    }
    fn total_tokens_to_swap(&self) -> impl Query<Output = MiniDexsQueryEvents, Args = R::Args> {
        RemotingAction::<_, mini_de_xs::io::TotalTokensToSwap>::new(self.remoting.clone(), ())
    }
    fn total_tokens_to_swap_as_u_128(
        &self,
    ) -> impl Query<Output = MiniDexsQueryEvents, Args = R::Args> {
        RemotingAction::<_, mini_de_xs::io::TotalTokensToSwapAsU128>::new(self.remoting.clone(), ())
    }
}
pub mod mini_de_xs {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct AddTokensToContract(());
        impl AddTokensToContract {
            #[allow(dead_code)]
            pub fn encode_call(tokens_to_add: u128) -> Vec<u8> {
                <AddTokensToContract as ActionIo>::encode_call(&tokens_to_add)
            }
        }
        impl ActionIo for AddTokensToContract {
            const ROUTE: &'static [u8] = &[
                32, 77, 105, 110, 105, 68, 101, 88, 115, 76, 65, 100, 100, 84, 111, 107, 101, 110,
                115, 84, 111, 67, 111, 110, 116, 114, 97, 99, 116,
            ];
            type Params = u128;
            type Reply = super::MiniDexsEvents;
        }
        pub struct SetMinTokensToAdd(());
        impl SetMinTokensToAdd {
            #[allow(dead_code)]
            pub fn encode_call(min_tokens_to_add: u128) -> Vec<u8> {
                <SetMinTokensToAdd as ActionIo>::encode_call(&min_tokens_to_add)
            }
        }
        impl ActionIo for SetMinTokensToAdd {
            const ROUTE: &'static [u8] = &[
                32, 77, 105, 110, 105, 68, 101, 88, 115, 68, 83, 101, 116, 77, 105, 110, 84, 111,
                107, 101, 110, 115, 84, 111, 65, 100, 100,
            ];
            type Params = u128;
            type Reply = super::MiniDexsEvents;
        }
        pub struct SetTokensPerVara(());
        impl SetTokensPerVara {
            #[allow(dead_code)]
            pub fn encode_call(tokens_per_vara: u128) -> Vec<u8> {
                <SetTokensPerVara as ActionIo>::encode_call(&tokens_per_vara)
            }
        }
        impl ActionIo for SetTokensPerVara {
            const ROUTE: &'static [u8] = &[
                32, 77, 105, 110, 105, 68, 101, 88, 115, 64, 83, 101, 116, 84, 111, 107, 101, 110,
                115, 80, 101, 114, 86, 97, 114, 97,
            ];
            type Params = u128;
            type Reply = super::MiniDexsEvents;
        }
        pub struct SetVftContractId(());
        impl SetVftContractId {
            #[allow(dead_code)]
            pub fn encode_call(vft_contract_id: ActorId) -> Vec<u8> {
                <SetVftContractId as ActionIo>::encode_call(&vft_contract_id)
            }
        }
        impl ActionIo for SetVftContractId {
            const ROUTE: &'static [u8] = &[
                32, 77, 105, 110, 105, 68, 101, 88, 115, 64, 83, 101, 116, 86, 102, 116, 67, 111,
                110, 116, 114, 97, 99, 116, 73, 100,
            ];
            type Params = ActorId;
            type Reply = super::MiniDexsEvents;
        }
        pub struct SwapTokensByNumOfVaras(());
        impl SwapTokensByNumOfVaras {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <SwapTokensByNumOfVaras as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for SwapTokensByNumOfVaras {
            const ROUTE: &'static [u8] = &[
                32, 77, 105, 110, 105, 68, 101, 88, 115, 88, 83, 119, 97, 112, 84, 111, 107, 101,
                110, 115, 66, 121, 78, 117, 109, 79, 102, 86, 97, 114, 97, 115,
            ];
            type Params = ();
            type Reply = super::MiniDexsEvents;
        }
        pub struct SwapTokensToVaras(());
        impl SwapTokensToVaras {
            #[allow(dead_code)]
            pub fn encode_call(amount_of_tokens: u128) -> Vec<u8> {
                <SwapTokensToVaras as ActionIo>::encode_call(&amount_of_tokens)
            }
        }
        impl ActionIo for SwapTokensToVaras {
            const ROUTE: &'static [u8] = &[
                32, 77, 105, 110, 105, 68, 101, 88, 115, 68, 83, 119, 97, 112, 84, 111, 107, 101,
                110, 115, 84, 111, 86, 97, 114, 97, 115,
            ];
            type Params = u128;
            type Reply = super::MiniDexsEvents;
        }
        pub struct TestBlockHeight(());
        impl TestBlockHeight {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TestBlockHeight as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TestBlockHeight {
            const ROUTE: &'static [u8] = &[
                32, 77, 105, 110, 105, 68, 101, 88, 115, 60, 84, 101, 115, 116, 66, 108, 111, 99,
                107, 72, 101, 105, 103, 104, 116,
            ];
            type Params = ();
            type Reply = u32;
        }
        pub struct TestBlockTime(());
        impl TestBlockTime {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TestBlockTime as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TestBlockTime {
            const ROUTE: &'static [u8] = &[
                32, 77, 105, 110, 105, 68, 101, 88, 115, 52, 84, 101, 115, 116, 66, 108, 111, 99,
                107, 84, 105, 109, 101,
            ];
            type Params = ();
            type Reply = u64;
        }
        pub struct ContractTotalVarasStored(());
        impl ContractTotalVarasStored {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <ContractTotalVarasStored as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for ContractTotalVarasStored {
            const ROUTE: &'static [u8] = &[
                32, 77, 105, 110, 105, 68, 101, 88, 115, 96, 67, 111, 110, 116, 114, 97, 99, 116,
                84, 111, 116, 97, 108, 86, 97, 114, 97, 115, 83, 116, 111, 114, 101, 100,
            ];
            type Params = ();
            type Reply = super::MiniDexsQueryEvents;
        }
        pub struct TestBlockHeight1(());
        impl TestBlockHeight1 {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TestBlockHeight1 as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TestBlockHeight1 {
            const ROUTE: &'static [u8] = &[
                32, 77, 105, 110, 105, 68, 101, 88, 115, 64, 84, 101, 115, 116, 66, 108, 111, 99,
                107, 72, 101, 105, 103, 104, 116, 49,
            ];
            type Params = ();
            type Reply = u32;
        }
        pub struct TestBlockTime1(());
        impl TestBlockTime1 {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TestBlockTime1 as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TestBlockTime1 {
            const ROUTE: &'static [u8] = &[
                32, 77, 105, 110, 105, 68, 101, 88, 115, 56, 84, 101, 115, 116, 66, 108, 111, 99,
                107, 84, 105, 109, 101, 49,
            ];
            type Params = ();
            type Reply = u64;
        }
        pub struct TokensToSwapOneVara(());
        impl TokensToSwapOneVara {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TokensToSwapOneVara as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TokensToSwapOneVara {
            const ROUTE: &'static [u8] = &[
                32, 77, 105, 110, 105, 68, 101, 88, 115, 76, 84, 111, 107, 101, 110, 115, 84, 111,
                83, 119, 97, 112, 79, 110, 101, 86, 97, 114, 97,
            ];
            type Params = ();
            type Reply = super::MiniDexsQueryEvents;
        }
        pub struct TotalTokensToSwap(());
        impl TotalTokensToSwap {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TotalTokensToSwap as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TotalTokensToSwap {
            const ROUTE: &'static [u8] = &[
                32, 77, 105, 110, 105, 68, 101, 88, 115, 68, 84, 111, 116, 97, 108, 84, 111, 107,
                101, 110, 115, 84, 111, 83, 119, 97, 112,
            ];
            type Params = ();
            type Reply = super::MiniDexsQueryEvents;
        }
        pub struct TotalTokensToSwapAsU128(());
        impl TotalTokensToSwapAsU128 {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TotalTokensToSwapAsU128 as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TotalTokensToSwapAsU128 {
            const ROUTE: &'static [u8] = &[
                32, 77, 105, 110, 105, 68, 101, 88, 115, 92, 84, 111, 116, 97, 108, 84, 111, 107,
                101, 110, 115, 84, 111, 83, 119, 97, 112, 65, 115, 85, 49, 50, 56,
            ];
            type Params = ();
            type Reply = super::MiniDexsQueryEvents;
        }
    }
}
pub struct MiniTamagotchi<R> {
    remoting: R,
}
impl<R> MiniTamagotchi<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::MiniTamagotchi for MiniTamagotchi<R> {
    type Args = R::Args;
    fn change_name(
        &mut self,
        name: String,
    ) -> impl Call<Output = MiniTamagotchiEvents, Args = R::Args> {
        RemotingAction::<_, mini_tamagotchi::io::ChangeName>::new(self.remoting.clone(), name)
    }
    fn feed_tamagotchi(&mut self) -> impl Call<Output = MiniTamagotchiEvents, Args = R::Args> {
        RemotingAction::<_, mini_tamagotchi::io::FeedTamagotchi>::new(self.remoting.clone(), ())
    }
    fn send_tamagotchi_to_play(
        &mut self,
    ) -> impl Call<Output = MiniTamagotchiEvents, Args = R::Args> {
        RemotingAction::<_, mini_tamagotchi::io::SendTamagotchiToPlay>::new(
            self.remoting.clone(),
            (),
        )
    }
    fn set_tamagotchi_is_hungry(
        &mut self,
    ) -> impl Call<Output = MiniTamagotchiEvents, Args = R::Args> {
        RemotingAction::<_, mini_tamagotchi::io::SetTamagotchiIsHungry>::new(
            self.remoting.clone(),
            (),
        )
    }
    fn stop_playing(&mut self) -> impl Call<Output = MiniTamagotchiEvents, Args = R::Args> {
        RemotingAction::<_, mini_tamagotchi::io::StopPlaying>::new(self.remoting.clone(), ())
    }
    fn tamagotchi_is_hungry(&self) -> impl Query<Output = MiniTamagotchiEvents, Args = R::Args> {
        RemotingAction::<_, mini_tamagotchi::io::TamagotchiIsHungry>::new(self.remoting.clone(), ())
    }
    fn tamagotchi_is_playing(&self) -> impl Query<Output = MiniTamagotchiEvents, Args = R::Args> {
        RemotingAction::<_, mini_tamagotchi::io::TamagotchiIsPlaying>::new(
            self.remoting.clone(),
            (),
        )
    }
}
pub mod mini_tamagotchi {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct ChangeName(());
        impl ChangeName {
            #[allow(dead_code)]
            pub fn encode_call(name: String) -> Vec<u8> {
                <ChangeName as ActionIo>::encode_call(&name)
            }
        }
        impl ActionIo for ChangeName {
            const ROUTE: &'static [u8] = &[
                56, 77, 105, 110, 105, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 40, 67, 104,
                97, 110, 103, 101, 78, 97, 109, 101,
            ];
            type Params = String;
            type Reply = super::MiniTamagotchiEvents;
        }
        pub struct FeedTamagotchi(());
        impl FeedTamagotchi {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <FeedTamagotchi as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for FeedTamagotchi {
            const ROUTE: &'static [u8] = &[
                56, 77, 105, 110, 105, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 56, 70, 101,
                101, 100, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105,
            ];
            type Params = ();
            type Reply = super::MiniTamagotchiEvents;
        }
        pub struct SendTamagotchiToPlay(());
        impl SendTamagotchiToPlay {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <SendTamagotchiToPlay as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for SendTamagotchiToPlay {
            const ROUTE: &'static [u8] = &[
                56, 77, 105, 110, 105, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 80, 83, 101,
                110, 100, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 84, 111, 80, 108, 97, 121,
            ];
            type Params = ();
            type Reply = super::MiniTamagotchiEvents;
        }
        pub struct SetTamagotchiIsHungry(());
        impl SetTamagotchiIsHungry {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <SetTamagotchiIsHungry as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for SetTamagotchiIsHungry {
            const ROUTE: &'static [u8] = &[
                56, 77, 105, 110, 105, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 84, 83, 101,
                116, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 73, 115, 72, 117, 110, 103, 114,
                121,
            ];
            type Params = ();
            type Reply = super::MiniTamagotchiEvents;
        }
        pub struct StopPlaying(());
        impl StopPlaying {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <StopPlaying as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for StopPlaying {
            const ROUTE: &'static [u8] = &[
                56, 77, 105, 110, 105, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 44, 83, 116,
                111, 112, 80, 108, 97, 121, 105, 110, 103,
            ];
            type Params = ();
            type Reply = super::MiniTamagotchiEvents;
        }
        pub struct TamagotchiIsHungry(());
        impl TamagotchiIsHungry {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TamagotchiIsHungry as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TamagotchiIsHungry {
            const ROUTE: &'static [u8] = &[
                56, 77, 105, 110, 105, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 72, 84, 97,
                109, 97, 103, 111, 116, 99, 104, 105, 73, 115, 72, 117, 110, 103, 114, 121,
            ];
            type Params = ();
            type Reply = super::MiniTamagotchiEvents;
        }
        pub struct TamagotchiIsPlaying(());
        impl TamagotchiIsPlaying {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TamagotchiIsPlaying as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TamagotchiIsPlaying {
            const ROUTE: &'static [u8] = &[
                56, 77, 105, 110, 105, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 76, 84, 97,
                109, 97, 103, 111, 116, 99, 104, 105, 73, 115, 80, 108, 97, 121, 105, 110, 103,
            ];
            type Params = ();
            type Reply = super::MiniTamagotchiEvents;
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum GasReservationEvents {
    ReservationsIds(Vec<u64>),
    ExpiredReservationsIds(Vec<u64>),
    NoReservationIdsToUnreserve,
    GasReservationsChecked,
    GasUnreserved(u64),
    GasReserved,
    Error(GasReservationError),
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum GasReservationError {
    UnableToUnreserveGas,
    ErrorWhileDoingReservation,
    GasReservationIdOverflow,
    GasReservationIsExpired(ReservationId),
    NoGasReservationsInContract,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct ReservationId(pub [u8; 32]);
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum MiniDexsEvents {
    RefundOfVaras(u128),
    VFTContractIdSet,
    MinTokensToAddSet,
    TokensAdded,
    SetTokensPerVaras,
    TotalSwapInVaras(u128),
    TokensSwapSuccessfully {
        total_tokens: u128,
        total_varas: u128,
    },
    Error(MiniDexsErrors),
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum MiniDexsErrors {
    MinTokensToAdd(u128),
    CantSwapTokens {
        tokens_in_vft_contract: U256,
    },
    CantSwapUserTokens {
        user_tokens: U256,
        tokens_to_swap: U256,
    },
    ContractCantMint,
    CantSwapTokensWithAmount {
        min_amount: u128,
        actual_amount: u128,
    },
    OnlyOwnerCanDoThatAction,
    VftContractIdNotSet,
    ErrorInVFTContract,
    ErrorInGetNumOfVarasToSwap,
    OperationWasNotPerformed,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum MiniDexsQueryEvents {
    ContractBalanceInVaras(u128),
    UserTotalTokensAsU128(u128),
    UserTotalTokens(U256),
    TotalTokensToSwap(U256),
    TotalTokensToSwapAsU128(u128),
    TokensToSwapOneVara(u128),
    NumOfTokensForOneVara(u128),
    Error(MiniDexsErrors),
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum MiniTamagotchiEvents {
    OnlyContractCanSendThisMessage,
    TamagotchiNameChanged,
    TamagotchiStopPlaying,
    TamagotchiAteSomething,
    TamagotchiIsPlaying,
    TamagotchiIsNotPlaying,
    TamagotchiIsHungry,
    TamagotchiIsNotHungry,
}
pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait AppFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
        fn new_with_data(
            &self,
            vft_contract_id: Option<ActorId>,
            min_tokens_to_add: u128,
            tokens_per_vara: u128,
        ) -> impl Activation<Args = Self::Args>;
    }
    #[allow(clippy::type_complexity)]
    pub trait ContractGasReservation {
        type Args;
        fn reserve_gas(
            &mut self,
            amount: u64,
            duration_in_blocks: u32,
        ) -> impl Call<Output = GasReservationEvents, Args = Self::Args>;
        fn unreserve_gas(
            &mut self,
            reservation_id: u64,
        ) -> impl Call<Output = GasReservationEvents, Args = Self::Args>;
        fn update_reservations_id_if_expired(
            &mut self,
        ) -> impl Call<Output = GasReservationEvents, Args = Self::Args>;
        fn expired_reservations_id(
            &self,
        ) -> impl Query<Output = GasReservationEvents, Args = Self::Args>;
        fn reservations_id(&self) -> impl Query<Output = GasReservationEvents, Args = Self::Args>;
    }
    #[allow(clippy::type_complexity)]
    pub trait MiniDeXs {
        type Args;
        fn add_tokens_to_contract(
            &mut self,
            tokens_to_add: u128,
        ) -> impl Call<Output = MiniDexsEvents, Args = Self::Args>;
        fn set_min_tokens_to_add(
            &mut self,
            min_tokens_to_add: u128,
        ) -> impl Call<Output = MiniDexsEvents, Args = Self::Args>;
        fn set_tokens_per_vara(
            &mut self,
            tokens_per_vara: u128,
        ) -> impl Call<Output = MiniDexsEvents, Args = Self::Args>;
        fn set_vft_contract_id(
            &mut self,
            vft_contract_id: ActorId,
        ) -> impl Call<Output = MiniDexsEvents, Args = Self::Args>;
        fn swap_tokens_by_num_of_varas(
            &mut self,
        ) -> impl Call<Output = MiniDexsEvents, Args = Self::Args>;
        fn swap_tokens_to_varas(
            &mut self,
            amount_of_tokens: u128,
        ) -> impl Call<Output = MiniDexsEvents, Args = Self::Args>;
        fn test_block_height(&mut self) -> impl Call<Output = u32, Args = Self::Args>;
        fn test_block_time(&mut self) -> impl Call<Output = u64, Args = Self::Args>;
        fn contract_total_varas_stored(
            &self,
        ) -> impl Query<Output = MiniDexsQueryEvents, Args = Self::Args>;
        fn test_block_height_1(&self) -> impl Query<Output = u32, Args = Self::Args>;
        fn test_block_time_1(&self) -> impl Query<Output = u64, Args = Self::Args>;
        fn tokens_to_swap_one_vara(
            &self,
        ) -> impl Query<Output = MiniDexsQueryEvents, Args = Self::Args>;
        fn total_tokens_to_swap(
            &self,
        ) -> impl Query<Output = MiniDexsQueryEvents, Args = Self::Args>;
        fn total_tokens_to_swap_as_u_128(
            &self,
        ) -> impl Query<Output = MiniDexsQueryEvents, Args = Self::Args>;
    }
    #[allow(clippy::type_complexity)]
    pub trait MiniTamagotchi {
        type Args;
        fn change_name(
            &mut self,
            name: String,
        ) -> impl Call<Output = MiniTamagotchiEvents, Args = Self::Args>;
        fn feed_tamagotchi(
            &mut self,
        ) -> impl Call<Output = MiniTamagotchiEvents, Args = Self::Args>;
        fn send_tamagotchi_to_play(
            &mut self,
        ) -> impl Call<Output = MiniTamagotchiEvents, Args = Self::Args>;
        fn set_tamagotchi_is_hungry(
            &mut self,
        ) -> impl Call<Output = MiniTamagotchiEvents, Args = Self::Args>;
        fn stop_playing(&mut self) -> impl Call<Output = MiniTamagotchiEvents, Args = Self::Args>;
        fn tamagotchi_is_hungry(
            &self,
        ) -> impl Query<Output = MiniTamagotchiEvents, Args = Self::Args>;
        fn tamagotchi_is_playing(
            &self,
        ) -> impl Query<Output = MiniTamagotchiEvents, Args = Self::Args>;
    }
}
#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
extern crate std;
#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
pub mod mockall {
    use super::*;
    use sails_rs::mockall::*;
    mock! { pub ContractGasReservation<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::ContractGasReservation for ContractGasReservation<A> { type Args = A; fn reserve_gas (&mut self, amount: u64,duration_in_blocks: u32,) -> MockCall<A, GasReservationEvents>;fn unreserve_gas (&mut self, reservation_id: u64,) -> MockCall<A, GasReservationEvents>;fn update_reservations_id_if_expired (&mut self, ) -> MockCall<A, GasReservationEvents>;fn expired_reservations_id (& self, ) -> MockQuery<A, GasReservationEvents>;fn reservations_id (& self, ) -> MockQuery<A, GasReservationEvents>; } }
    mock! { pub MiniDeXs<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::MiniDeXs for MiniDeXs<A> { type Args = A; fn add_tokens_to_contract (&mut self, tokens_to_add: u128,) -> MockCall<A, MiniDexsEvents>;fn set_min_tokens_to_add (&mut self, min_tokens_to_add: u128,) -> MockCall<A, MiniDexsEvents>;fn set_tokens_per_vara (&mut self, tokens_per_vara: u128,) -> MockCall<A, MiniDexsEvents>;fn set_vft_contract_id (&mut self, vft_contract_id: ActorId,) -> MockCall<A, MiniDexsEvents>;fn swap_tokens_by_num_of_varas (&mut self, ) -> MockCall<A, MiniDexsEvents>;fn swap_tokens_to_varas (&mut self, amount_of_tokens: u128,) -> MockCall<A, MiniDexsEvents>;fn test_block_height (&mut self, ) -> MockCall<A, u32>;fn test_block_time (&mut self, ) -> MockCall<A, u64>;fn contract_total_varas_stored (& self, ) -> MockQuery<A, MiniDexsQueryEvents>;fn test_block_height_1 (& self, ) -> MockQuery<A, u32>;fn test_block_time_1 (& self, ) -> MockQuery<A, u64>;fn tokens_to_swap_one_vara (& self, ) -> MockQuery<A, MiniDexsQueryEvents>;fn total_tokens_to_swap (& self, ) -> MockQuery<A, MiniDexsQueryEvents>;fn total_tokens_to_swap_as_u_128 (& self, ) -> MockQuery<A, MiniDexsQueryEvents>; } }
    mock! { pub MiniTamagotchi<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::MiniTamagotchi for MiniTamagotchi<A> { type Args = A; fn change_name (&mut self, name: String,) -> MockCall<A, MiniTamagotchiEvents>;fn feed_tamagotchi (&mut self, ) -> MockCall<A, MiniTamagotchiEvents>;fn send_tamagotchi_to_play (&mut self, ) -> MockCall<A, MiniTamagotchiEvents>;fn set_tamagotchi_is_hungry (&mut self, ) -> MockCall<A, MiniTamagotchiEvents>;fn stop_playing (&mut self, ) -> MockCall<A, MiniTamagotchiEvents>;fn tamagotchi_is_hungry (& self, ) -> MockQuery<A, MiniTamagotchiEvents>;fn tamagotchi_is_playing (& self, ) -> MockQuery<A, MiniTamagotchiEvents>; } }
}
