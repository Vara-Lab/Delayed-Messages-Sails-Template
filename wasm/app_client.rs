// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct AppFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> AppFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::AppFactory for AppFactory<R> {
    type Args = R::Args;
    fn new(&self, tamagotchi_name: Option<String>) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::New>::new(self.remoting.clone(), tamagotchi_name)
    }
}
pub mod app_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call(tamagotchi_name: Option<String>) -> Vec<u8> {
                <New as ActionIo>::encode_call(&tamagotchi_name)
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = Option<String>;
            type Reply = ();
        }
    }
}
pub struct ContractGasReservation<R> {
    remoting: R,
}
impl<R> ContractGasReservation<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::ContractGasReservation for ContractGasReservation<R> {
    type Args = R::Args;
    fn reserve_gas(
        &mut self,
        amount: u64,
        duration_in_blocks: u32,
    ) -> impl Call<Output = GasReservationEvents, Args = R::Args> {
        RemotingAction::<_, contract_gas_reservation::io::ReserveGas>::new(
            self.remoting.clone(),
            (amount, duration_in_blocks),
        )
    }
    fn unreserve_gas(
        &mut self,
        reservation_id: u64,
    ) -> impl Call<Output = GasReservationEvents, Args = R::Args> {
        RemotingAction::<_, contract_gas_reservation::io::UnreserveGas>::new(
            self.remoting.clone(),
            reservation_id,
        )
    }
    fn update_reservations_id_if_expired(
        &mut self,
    ) -> impl Call<Output = GasReservationEvents, Args = R::Args> {
        RemotingAction::<_, contract_gas_reservation::io::UpdateReservationsIdIfExpired>::new(
            self.remoting.clone(),
            (),
        )
    }
    fn expired_reservations_id(&self) -> impl Query<Output = GasReservationEvents, Args = R::Args> {
        RemotingAction::<_, contract_gas_reservation::io::ExpiredReservationsId>::new(
            self.remoting.clone(),
            (),
        )
    }
    fn gas_reservations_data(
        &self,
    ) -> impl Query<Output = Vec<GasReservationData>, Args = R::Args> {
        RemotingAction::<_, contract_gas_reservation::io::GasReservationsData>::new(
            self.remoting.clone(),
            (),
        )
    }
    fn reservations_id(&self) -> impl Query<Output = GasReservationEvents, Args = R::Args> {
        RemotingAction::<_, contract_gas_reservation::io::ReservationsId>::new(
            self.remoting.clone(),
            (),
        )
    }
}
pub mod contract_gas_reservation {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct ReserveGas(());
        impl ReserveGas {
            #[allow(dead_code)]
            pub fn encode_call(amount: u64, duration_in_blocks: u32) -> Vec<u8> {
                <ReserveGas as ActionIo>::encode_call(&(amount, duration_in_blocks))
            }
        }
        impl ActionIo for ReserveGas {
            const ROUTE: &'static [u8] = &[
                88, 67, 111, 110, 116, 114, 97, 99, 116, 71, 97, 115, 82, 101, 115, 101, 114, 118,
                97, 116, 105, 111, 110, 40, 82, 101, 115, 101, 114, 118, 101, 71, 97, 115,
            ];
            type Params = (u64, u32);
            type Reply = super::GasReservationEvents;
        }
        pub struct UnreserveGas(());
        impl UnreserveGas {
            #[allow(dead_code)]
            pub fn encode_call(reservation_id: u64) -> Vec<u8> {
                <UnreserveGas as ActionIo>::encode_call(&reservation_id)
            }
        }
        impl ActionIo for UnreserveGas {
            const ROUTE: &'static [u8] = &[
                88, 67, 111, 110, 116, 114, 97, 99, 116, 71, 97, 115, 82, 101, 115, 101, 114, 118,
                97, 116, 105, 111, 110, 48, 85, 110, 114, 101, 115, 101, 114, 118, 101, 71, 97,
                115,
            ];
            type Params = u64;
            type Reply = super::GasReservationEvents;
        }
        pub struct UpdateReservationsIdIfExpired(());
        impl UpdateReservationsIdIfExpired {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <UpdateReservationsIdIfExpired as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for UpdateReservationsIdIfExpired {
            const ROUTE: &'static [u8] = &[
                88, 67, 111, 110, 116, 114, 97, 99, 116, 71, 97, 115, 82, 101, 115, 101, 114, 118,
                97, 116, 105, 111, 110, 116, 85, 112, 100, 97, 116, 101, 82, 101, 115, 101, 114,
                118, 97, 116, 105, 111, 110, 115, 73, 100, 73, 102, 69, 120, 112, 105, 114, 101,
                100,
            ];
            type Params = ();
            type Reply = super::GasReservationEvents;
        }
        pub struct ExpiredReservationsId(());
        impl ExpiredReservationsId {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <ExpiredReservationsId as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for ExpiredReservationsId {
            const ROUTE: &'static [u8] = &[
                88, 67, 111, 110, 116, 114, 97, 99, 116, 71, 97, 115, 82, 101, 115, 101, 114, 118,
                97, 116, 105, 111, 110, 84, 69, 120, 112, 105, 114, 101, 100, 82, 101, 115, 101,
                114, 118, 97, 116, 105, 111, 110, 115, 73, 100,
            ];
            type Params = ();
            type Reply = super::GasReservationEvents;
        }
        pub struct GasReservationsData(());
        impl GasReservationsData {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <GasReservationsData as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for GasReservationsData {
            const ROUTE: &'static [u8] = &[
                88, 67, 111, 110, 116, 114, 97, 99, 116, 71, 97, 115, 82, 101, 115, 101, 114, 118,
                97, 116, 105, 111, 110, 76, 71, 97, 115, 82, 101, 115, 101, 114, 118, 97, 116, 105,
                111, 110, 115, 68, 97, 116, 97,
            ];
            type Params = ();
            type Reply = Vec<super::GasReservationData>;
        }
        pub struct ReservationsId(());
        impl ReservationsId {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <ReservationsId as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for ReservationsId {
            const ROUTE: &'static [u8] = &[
                88, 67, 111, 110, 116, 114, 97, 99, 116, 71, 97, 115, 82, 101, 115, 101, 114, 118,
                97, 116, 105, 111, 110, 56, 82, 101, 115, 101, 114, 118, 97, 116, 105, 111, 110,
                115, 73, 100,
            ];
            type Params = ();
            type Reply = super::GasReservationEvents;
        }
    }
}
pub struct MiniTamagotchi<R> {
    remoting: R,
}
impl<R> MiniTamagotchi<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::MiniTamagotchi for MiniTamagotchi<R> {
    type Args = R::Args;
    fn change_name(
        &mut self,
        name: String,
    ) -> impl Call<Output = MiniTamagotchiEvents, Args = R::Args> {
        RemotingAction::<_, mini_tamagotchi::io::ChangeName>::new(self.remoting.clone(), name)
    }
    fn feed_tamagotchi(&mut self) -> impl Call<Output = MiniTamagotchiEvents, Args = R::Args> {
        RemotingAction::<_, mini_tamagotchi::io::FeedTamagotchi>::new(self.remoting.clone(), ())
    }
    fn send_tamagotchi_to_play(
        &mut self,
    ) -> impl Call<Output = MiniTamagotchiEvents, Args = R::Args> {
        RemotingAction::<_, mini_tamagotchi::io::SendTamagotchiToPlay>::new(
            self.remoting.clone(),
            (),
        )
    }
    fn set_tamagotchi_is_hungry(
        &mut self,
    ) -> impl Call<Output = MiniTamagotchiEvents, Args = R::Args> {
        RemotingAction::<_, mini_tamagotchi::io::SetTamagotchiIsHungry>::new(
            self.remoting.clone(),
            (),
        )
    }
    fn stop_playing(&mut self) -> impl Call<Output = MiniTamagotchiEvents, Args = R::Args> {
        RemotingAction::<_, mini_tamagotchi::io::StopPlaying>::new(self.remoting.clone(), ())
    }
    fn tamagotchi_is_hungry(&self) -> impl Query<Output = MiniTamagotchiEvents, Args = R::Args> {
        RemotingAction::<_, mini_tamagotchi::io::TamagotchiIsHungry>::new(self.remoting.clone(), ())
    }
    fn tamagotchi_is_playing(&self) -> impl Query<Output = MiniTamagotchiEvents, Args = R::Args> {
        RemotingAction::<_, mini_tamagotchi::io::TamagotchiIsPlaying>::new(
            self.remoting.clone(),
            (),
        )
    }
    fn tamagotchi_name(&self) -> impl Query<Output = MiniTamagotchiEvents, Args = R::Args> {
        RemotingAction::<_, mini_tamagotchi::io::TamagotchiName>::new(self.remoting.clone(), ())
    }
}
pub mod mini_tamagotchi {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct ChangeName(());
        impl ChangeName {
            #[allow(dead_code)]
            pub fn encode_call(name: String) -> Vec<u8> {
                <ChangeName as ActionIo>::encode_call(&name)
            }
        }
        impl ActionIo for ChangeName {
            const ROUTE: &'static [u8] = &[
                56, 77, 105, 110, 105, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 40, 67, 104,
                97, 110, 103, 101, 78, 97, 109, 101,
            ];
            type Params = String;
            type Reply = super::MiniTamagotchiEvents;
        }
        pub struct FeedTamagotchi(());
        impl FeedTamagotchi {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <FeedTamagotchi as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for FeedTamagotchi {
            const ROUTE: &'static [u8] = &[
                56, 77, 105, 110, 105, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 56, 70, 101,
                101, 100, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105,
            ];
            type Params = ();
            type Reply = super::MiniTamagotchiEvents;
        }
        pub struct SendTamagotchiToPlay(());
        impl SendTamagotchiToPlay {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <SendTamagotchiToPlay as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for SendTamagotchiToPlay {
            const ROUTE: &'static [u8] = &[
                56, 77, 105, 110, 105, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 80, 83, 101,
                110, 100, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 84, 111, 80, 108, 97, 121,
            ];
            type Params = ();
            type Reply = super::MiniTamagotchiEvents;
        }
        pub struct SetTamagotchiIsHungry(());
        impl SetTamagotchiIsHungry {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <SetTamagotchiIsHungry as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for SetTamagotchiIsHungry {
            const ROUTE: &'static [u8] = &[
                56, 77, 105, 110, 105, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 84, 83, 101,
                116, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 73, 115, 72, 117, 110, 103, 114,
                121,
            ];
            type Params = ();
            type Reply = super::MiniTamagotchiEvents;
        }
        pub struct StopPlaying(());
        impl StopPlaying {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <StopPlaying as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for StopPlaying {
            const ROUTE: &'static [u8] = &[
                56, 77, 105, 110, 105, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 44, 83, 116,
                111, 112, 80, 108, 97, 121, 105, 110, 103,
            ];
            type Params = ();
            type Reply = super::MiniTamagotchiEvents;
        }
        pub struct TamagotchiIsHungry(());
        impl TamagotchiIsHungry {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TamagotchiIsHungry as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TamagotchiIsHungry {
            const ROUTE: &'static [u8] = &[
                56, 77, 105, 110, 105, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 72, 84, 97,
                109, 97, 103, 111, 116, 99, 104, 105, 73, 115, 72, 117, 110, 103, 114, 121,
            ];
            type Params = ();
            type Reply = super::MiniTamagotchiEvents;
        }
        pub struct TamagotchiIsPlaying(());
        impl TamagotchiIsPlaying {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TamagotchiIsPlaying as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TamagotchiIsPlaying {
            const ROUTE: &'static [u8] = &[
                56, 77, 105, 110, 105, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 76, 84, 97,
                109, 97, 103, 111, 116, 99, 104, 105, 73, 115, 80, 108, 97, 121, 105, 110, 103,
            ];
            type Params = ();
            type Reply = super::MiniTamagotchiEvents;
        }
        pub struct TamagotchiName(());
        impl TamagotchiName {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TamagotchiName as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TamagotchiName {
            const ROUTE: &'static [u8] = &[
                56, 77, 105, 110, 105, 84, 97, 109, 97, 103, 111, 116, 99, 104, 105, 56, 84, 97,
                109, 97, 103, 111, 116, 99, 104, 105, 78, 97, 109, 101,
            ];
            type Params = ();
            type Reply = super::MiniTamagotchiEvents;
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum GasReservationEvents {
    DeletedExpiredGasReservations,
    ReservationsIds(Vec<u64>),
    ExpiredReservationsIds(Vec<u64>),
    GasReservationsChecked,
    GasUnreserved(u64),
    GasReserved,
    Error(GasReservationError),
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum GasReservationError {
    NoReservationIdsToUnreserve,
    UnableToUnreserveGas,
    ErrorWhileDoingReservation,
    GasReservationIdOverflow,
    GasReservationIsExpired(ReservationId),
    NoGasReservationsInContract,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct ReservationId(pub [u8; 32]);
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct GasReservationData {
    pub reservation_id: u64,
    pub expire_at_block: u32,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum MiniTamagotchiEvents {
    MessageDelayedSend,
    NoReservationIdsToUnreserve,
    OnlyContractCanSendThisMessage,
    TamagotchiName(String),
    TamagotchiNameChanged,
    TamagotchiStopPlaying,
    TamagotchiAteSomething,
    TamagotchiIsPlaying,
    TamagotchiIsNotPlaying,
    TamagotchiIsHungry,
    TamagotchiIsNotHungry,
}
pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait AppFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self, tamagotchi_name: Option<String>) -> impl Activation<Args = Self::Args>;
    }
    #[allow(clippy::type_complexity)]
    pub trait ContractGasReservation {
        type Args;
        fn reserve_gas(
            &mut self,
            amount: u64,
            duration_in_blocks: u32,
        ) -> impl Call<Output = GasReservationEvents, Args = Self::Args>;
        fn unreserve_gas(
            &mut self,
            reservation_id: u64,
        ) -> impl Call<Output = GasReservationEvents, Args = Self::Args>;
        fn update_reservations_id_if_expired(
            &mut self,
        ) -> impl Call<Output = GasReservationEvents, Args = Self::Args>;
        fn expired_reservations_id(
            &self,
        ) -> impl Query<Output = GasReservationEvents, Args = Self::Args>;
        fn gas_reservations_data(
            &self,
        ) -> impl Query<Output = Vec<GasReservationData>, Args = Self::Args>;
        fn reservations_id(&self) -> impl Query<Output = GasReservationEvents, Args = Self::Args>;
    }
    #[allow(clippy::type_complexity)]
    pub trait MiniTamagotchi {
        type Args;
        fn change_name(
            &mut self,
            name: String,
        ) -> impl Call<Output = MiniTamagotchiEvents, Args = Self::Args>;
        fn feed_tamagotchi(
            &mut self,
        ) -> impl Call<Output = MiniTamagotchiEvents, Args = Self::Args>;
        fn send_tamagotchi_to_play(
            &mut self,
        ) -> impl Call<Output = MiniTamagotchiEvents, Args = Self::Args>;
        fn set_tamagotchi_is_hungry(
            &mut self,
        ) -> impl Call<Output = MiniTamagotchiEvents, Args = Self::Args>;
        fn stop_playing(&mut self) -> impl Call<Output = MiniTamagotchiEvents, Args = Self::Args>;
        fn tamagotchi_is_hungry(
            &self,
        ) -> impl Query<Output = MiniTamagotchiEvents, Args = Self::Args>;
        fn tamagotchi_is_playing(
            &self,
        ) -> impl Query<Output = MiniTamagotchiEvents, Args = Self::Args>;
        fn tamagotchi_name(&self) -> impl Query<Output = MiniTamagotchiEvents, Args = Self::Args>;
    }
}
#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
extern crate std;
#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
pub mod mockall {
    use super::*;
    use sails_rs::mockall::*;
    mock! { pub ContractGasReservation<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::ContractGasReservation for ContractGasReservation<A> { type Args = A; fn reserve_gas (&mut self, amount: u64,duration_in_blocks: u32,) -> MockCall<A, GasReservationEvents>;fn unreserve_gas (&mut self, reservation_id: u64,) -> MockCall<A, GasReservationEvents>;fn update_reservations_id_if_expired (&mut self, ) -> MockCall<A, GasReservationEvents>;fn expired_reservations_id (& self, ) -> MockQuery<A, GasReservationEvents>;fn gas_reservations_data (& self, ) -> MockQuery<A, Vec<GasReservationData>>;fn reservations_id (& self, ) -> MockQuery<A, GasReservationEvents>; } }
    mock! { pub MiniTamagotchi<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::MiniTamagotchi for MiniTamagotchi<A> { type Args = A; fn change_name (&mut self, name: String,) -> MockCall<A, MiniTamagotchiEvents>;fn feed_tamagotchi (&mut self, ) -> MockCall<A, MiniTamagotchiEvents>;fn send_tamagotchi_to_play (&mut self, ) -> MockCall<A, MiniTamagotchiEvents>;fn set_tamagotchi_is_hungry (&mut self, ) -> MockCall<A, MiniTamagotchiEvents>;fn stop_playing (&mut self, ) -> MockCall<A, MiniTamagotchiEvents>;fn tamagotchi_is_hungry (& self, ) -> MockQuery<A, MiniTamagotchiEvents>;fn tamagotchi_is_playing (& self, ) -> MockQuery<A, MiniTamagotchiEvents>;fn tamagotchi_name (& self, ) -> MockQuery<A, MiniTamagotchiEvents>; } }
}
